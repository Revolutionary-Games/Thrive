namespace thrive { /**

@page entity_component Entities, Components and Systems

Introductions to the entity / component approach can be found here:
 - <a href="http://piemaster.net/2011/07/entity-component-primer/">Entity / Component Game Design: A Primer</a>
 - <a href="http://www.gamasutra.com/blogs/MeganFox/20101208/88590/Game_Engines_101_The_EntityComponent_Model.php">Game Engines 101: The Entity / Component Model</a>
 - <a href="http://www.richardlord.net/blog/what-is-an-entity-framework">What is an entity system framework?</a>

The following gives an overview of the implementation of entities, 
components and systems in Thrive.

@section entity_manager Entity Manager

Entities and their components are managed by an EntityManager. The
EntityManager identifies each entity by its unique id. You can use
either EntityManager::generateNewId() or EntityManager::getNamedId()
to obtain an id.

An entity can have at most one component of each type. Component types are
distinguished primarily by their <em>component id</em> (see also 
Component::generateTypeId()). This component id is generated dynamically
at application startup and may change between executions. To identify a
component type across executions, use the <em>component name</em>, which
should be constant between executions. To convert between component id
and component name, use ComponentFactory::typeNameToId() and 
ComponentFactory::typeIdToName().

For convenience, there's an Entity class that wraps the API of 
EntityManager in an entity-centric way.

@section system Systems

The absolute minimum a system has to implement is the System::update()
function. You can also override System::init() and System::shutdown() for
setup and teardown procedures.

Usually, a system operates on entities that have a specific combination of
components. The EntityFilter template can filter out entities that have
such a component makeup.

@section engine Engine

All systems are managed by the engine. The engine provides the entity 
manager, initializes the systems, updates them during the game and 
finally, shuts them down.

*/ }
