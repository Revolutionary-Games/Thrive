[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
uniform int MAX_STEPS = 145000; // march at most 250 times
uniform float MAX_DIST = 7000; // don't continue if depth if larger than 20
uniform float MIN_HIT_DIST = 0.00001f; // hit depth threshold
uniform sampler3D da;

void vertex() {
  POSITION = vec4(VERTEX, 1.0);
}

//float gauss()
//{
//
//}

float signedDistance(vec3 center, float radius, vec3 point)
{
	return length(center - point) - radius;
	
}
vec2 sdf(vec3 point)
{
	vec3 circles[3]= vec3[3] (vec3(1,1,0),vec3(13,73,-10),vec3(-10,-10,11));
	float m = signedDistance(circles[2],30,point);
	float d;
	float nrCircles = 0f;
	for (int i = 0;i<3;i++)
		{
			d = signedDistance(circles[i],30,point);
			if (d < 0f)
				nrCircles += 1f;
			if(abs(d) < abs(m))
				m = d;
		}
	return vec2(m,nrCircles);
}
vec3 raymarch(vec3 rayDir,vec3 cameraPos)
{
 	float dstToSphere = 0f;
	float dstToExit = 0f;
    float depth = 0.0;
	float density = 0f;
	//Coordonate pentru 2 puncte de intersectie cu raza
    for (int i=0; depth<MAX_DIST && i<MAX_STEPS; ++i)
    {	
        vec3 pos = cameraPos + rayDir * depth;
		vec2 sdfInfo = sdf(pos);
        float dist = abs(sdfInfo.x);
		float nrCircles = sdfInfo.y;
        if (dist < MIN_HIT_DIST) {
			dist += 0.1f;
			if (dstToSphere == 0f)
				{dstToSphere = depth;}
			else
			{
				dstToExit = depth;
				//break;
			}
        }
		density += dist/40f * nrCircles;
        depth += dist;
    }
    return vec3 (dstToSphere ,dstToExit, density);
}

void fragment()
{
	float depth = texture(DEPTH_TEXTURE, SCREEN_UV).x;
	vec3 ndc = vec3(SCREEN_UV, depth) * 2.0 - 1.0;
	vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
	view.xyz /= view.w;
	float linear_depth = -view.z;
	
	vec3 worldCamera = (CAMERA_MATRIX * vec4(0f,0f,0f,1f)).xyz;
	vec4 world = CAMERA_MATRIX * view;
    vec3 world_position = world.xyz / world.w;
	
	
	vec3 rayDir = normalize(world_position - worldCamera);
	vec3 rayInfo = raymarch(rayDir, worldCamera);
	float distToSphere = rayInfo.x;
	float distToSphereExit = rayInfo.y;

	if (distToSphereExit == 0f)
		distToSphereExit = distToSphere;
	vec3 rayColor = vec3(0f,0f,0f);
	if (rayInfo.x != 0f)
		rayColor = vec3(2f,0.1f,0.5f);

	ALBEDO = rayColor.xyz;
	
	// Alpha calculation
	float dist = (abs(distToSphere-distToSphereExit));
	float density = rayInfo.z;
	float alpha = 1f-exp(-density/1f);
//	alpha= min (1f,alpha);
	ALPHA = alpha;

	if (rayColor.xyz == vec3 (0f,0f,0f) || linear_depth < abs(distToSphere)  || density >50f )
		ALPHA = 0f;
		


}"
